<?php

declare(strict_types=1);

/**
 * Autoload classes
 * 
 * Autoloading is a way to automatically load classes without having to require them manually.
 * 
 * This is the custom autoloader function that will be called every time a class is instantiated.
 * 
 * @link https://www.php-fig.org/
 */
spl_autoload_register(function ($class) {

    // Define the root directory
    $root = __DIR__ . '/../';

    // Convert the class name to a file path
    $file = $root . lcfirst(str_replace('\\', '/', $class)) . '.php';

    // If the file exists, require it
    if (file_exists($file)) {
        require $file;
    }
});

use App\PaymentGateway\Paddle\Transaction;

$paddle = new Transaction();

print_r($paddle);

//? Composer: is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.

// Packagist: is the main Composer repository. It aggregates public PHP packages installable with Composer.
// https://packagist.org/
// composer require ramsey/uuid: This command will install the ramsey/uuid package in your project.

// Composer.json: is the main configuration file for Composer. It contains the project's dependencies, the PHP version, and other metadata.
// Composer.lock: is a file that locks the dependencies to specific versions. It is generated by Composer when you run the install command.

//* Para regenerar el autoload.php se debe ejecutar el comando composer dump-autoload
//* Composer dump-autoload -o: Optimizes the autoloader without scanning the filesystem for classes. This is recommended for production to speed up the autoloading process.

// This way we can autoload the classes without having to write the autoloader function.
require __DIR__ . '/../vendor/autoload.php';

$id = new \Ramsey\Uuid\UuidFactory();

print_r($id->uuid4());